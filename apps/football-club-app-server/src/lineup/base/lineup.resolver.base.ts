/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Lineup } from "./Lineup";
import { LineupCountArgs } from "./LineupCountArgs";
import { LineupFindManyArgs } from "./LineupFindManyArgs";
import { LineupFindUniqueArgs } from "./LineupFindUniqueArgs";
import { CreateLineupArgs } from "./CreateLineupArgs";
import { UpdateLineupArgs } from "./UpdateLineupArgs";
import { DeleteLineupArgs } from "./DeleteLineupArgs";
import { Match } from "../../match/base/Match";
import { Player } from "../../player/base/Player";
import { LineupService } from "../lineup.service";
@graphql.Resolver(() => Lineup)
export class LineupResolverBase {
  constructor(protected readonly service: LineupService) {}

  async _lineupsMeta(
    @graphql.Args() args: LineupCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Lineup])
  async lineups(@graphql.Args() args: LineupFindManyArgs): Promise<Lineup[]> {
    return this.service.lineups(args);
  }

  @graphql.Query(() => Lineup, { nullable: true })
  async lineup(
    @graphql.Args() args: LineupFindUniqueArgs
  ): Promise<Lineup | null> {
    const result = await this.service.lineup(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Lineup)
  async createLineup(@graphql.Args() args: CreateLineupArgs): Promise<Lineup> {
    return await this.service.createLineup({
      ...args,
      data: {
        ...args.data,

        match: args.data.match
          ? {
              connect: args.data.match,
            }
          : undefined,

        player: args.data.player
          ? {
              connect: args.data.player,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Lineup)
  async updateLineup(
    @graphql.Args() args: UpdateLineupArgs
  ): Promise<Lineup | null> {
    try {
      return await this.service.updateLineup({
        ...args,
        data: {
          ...args.data,

          match: args.data.match
            ? {
                connect: args.data.match,
              }
            : undefined,

          player: args.data.player
            ? {
                connect: args.data.player,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Lineup)
  async deleteLineup(
    @graphql.Args() args: DeleteLineupArgs
  ): Promise<Lineup | null> {
    try {
      return await this.service.deleteLineup(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Match, {
    nullable: true,
    name: "match",
  })
  async getMatch(@graphql.Parent() parent: Lineup): Promise<Match | null> {
    const result = await this.service.getMatch(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }

  @graphql.ResolveField(() => Player, {
    nullable: true,
    name: "player",
  })
  async getPlayer(@graphql.Parent() parent: Lineup): Promise<Player | null> {
    const result = await this.service.getPlayer(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
