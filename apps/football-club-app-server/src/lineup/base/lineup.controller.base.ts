/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LineupService } from "../lineup.service";
import { LineupCreateInput } from "./LineupCreateInput";
import { Lineup } from "./Lineup";
import { LineupFindManyArgs } from "./LineupFindManyArgs";
import { LineupWhereUniqueInput } from "./LineupWhereUniqueInput";
import { LineupUpdateInput } from "./LineupUpdateInput";

export class LineupControllerBase {
  constructor(protected readonly service: LineupService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Lineup })
  async createLineup(@common.Body() data: LineupCreateInput): Promise<Lineup> {
    return await this.service.createLineup({
      data: {
        ...data,

        match: data.match
          ? {
              connect: data.match,
            }
          : undefined,

        player: data.player
          ? {
              connect: data.player,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,

        match: {
          select: {
            id: true,
          },
        },

        player: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Lineup] })
  @ApiNestedQuery(LineupFindManyArgs)
  async lineups(@common.Req() request: Request): Promise<Lineup[]> {
    const args = plainToClass(LineupFindManyArgs, request.query);
    return this.service.lineups({
      ...args,
      select: {
        createdAt: true,
        id: true,

        match: {
          select: {
            id: true,
          },
        },

        player: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Lineup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async lineup(
    @common.Param() params: LineupWhereUniqueInput
  ): Promise<Lineup | null> {
    const result = await this.service.lineup({
      where: params,
      select: {
        createdAt: true,
        id: true,

        match: {
          select: {
            id: true,
          },
        },

        player: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Lineup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLineup(
    @common.Param() params: LineupWhereUniqueInput,
    @common.Body() data: LineupUpdateInput
  ): Promise<Lineup | null> {
    try {
      return await this.service.updateLineup({
        where: params,
        data: {
          ...data,

          match: data.match
            ? {
                connect: data.match,
              }
            : undefined,

          player: data.player
            ? {
                connect: data.player,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,

          match: {
            select: {
              id: true,
            },
          },

          player: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Lineup })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLineup(
    @common.Param() params: LineupWhereUniqueInput
  ): Promise<Lineup | null> {
    try {
      return await this.service.deleteLineup({
        where: params,
        select: {
          createdAt: true,
          id: true,

          match: {
            select: {
              id: true,
            },
          },

          player: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
