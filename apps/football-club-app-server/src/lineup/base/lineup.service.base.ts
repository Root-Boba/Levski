/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  Lineup as PrismaLineup,
  Match as PrismaMatch,
  Player as PrismaPlayer,
} from "@prisma/client";

export class LineupServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.LineupCountArgs, "select">): Promise<number> {
    return this.prisma.lineup.count(args);
  }

  async lineups(args: Prisma.LineupFindManyArgs): Promise<PrismaLineup[]> {
    return this.prisma.lineup.findMany(args);
  }
  async lineup(
    args: Prisma.LineupFindUniqueArgs
  ): Promise<PrismaLineup | null> {
    return this.prisma.lineup.findUnique(args);
  }
  async createLineup(args: Prisma.LineupCreateArgs): Promise<PrismaLineup> {
    return this.prisma.lineup.create(args);
  }
  async updateLineup(args: Prisma.LineupUpdateArgs): Promise<PrismaLineup> {
    return this.prisma.lineup.update(args);
  }
  async deleteLineup(args: Prisma.LineupDeleteArgs): Promise<PrismaLineup> {
    return this.prisma.lineup.delete(args);
  }

  async getMatch(parentId: string): Promise<PrismaMatch | null> {
    return this.prisma.lineup
      .findUnique({
        where: { id: parentId },
      })
      .match();
  }

  async getPlayer(parentId: string): Promise<PrismaPlayer | null> {
    return this.prisma.lineup
      .findUnique({
        where: { id: parentId },
      })
      .player();
  }
}
